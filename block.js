const Web3 = require('web3')
const rpcUrl = "http://localhost:8000"
// const Web3Personal = require('web3-shh')
// const shh = new Web3Personal(rpcUrl)
const web3 = new Web3(rpcUrl) 
//const web3 = new Web3(new Web3.providers.HttpProvider(rpcUrl));
var Accounts = require('web3-eth-accounts')
var keyth = require('keythereum')
const Tx = require('ethereumjs-tx').Transaction
// const ContractGet = require('./app/models/contract')



//console.log(web3.eth.accounts)

// console.log(Web3.version)
var accountOrpa = "0x1e5b5290cd524f41f8599168b0e26f00eb71624c"; //new1
var accountMe = "0x5e452d1324da0001ff5e65ec8834dd7463bac78f"; //new2
var accountFaisal = "0xb3409fa49c419ff73e37001df095d5be1d62923e"; //new3
var accountTusu = "0xe7d7dd47a2824e8718d5541b2e9ade781ee73ba7"; //new4

var abi = [
	{
		"inputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "string",
				"name": "orderId",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "depotId",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "seller",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "drug",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "role",
				"type": "string"
			}
		],
		"name": "logDrugInfo",
		"type": "event"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "depotId",
		"outputs": [
			{
				"internalType": "address payable",
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "isDepotId_",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "isSeller_",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "seller",
		"outputs": [
			{
				"internalType": "address payable",
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"internalType": "string",
				"name": "_orderId",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_depotId",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_seller",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_drug",
				"type": "string"
			}
		],
		"name": "storeDrugs",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	}
];

var bytecode = "0x" + "608060405233600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c99806100546000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806308551a531461005c5780632be01d6c146100a657806332c9ce0a146103265780637c74d4f314610370578063aea9b07d14610392575b600080fd5b6100646103b4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610324600480360360808110156100bc57600080fd5b81019080803590602001906401000000008111156100d957600080fd5b8201836020820111156100eb57600080fd5b8035906020019184600183028401116401000000008311171561010d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561017057600080fd5b82018360208201111561018257600080fd5b803590602001918460018302840111640100000000831117156101a457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561020757600080fd5b82018360208201111561021957600080fd5b8035906020019184600183028401116401000000008311171561023b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561029e57600080fd5b8201836020820111156102b057600080fd5b803590602001918460018302840111640100000000831117156102d257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506103da565b005b61032e610a98565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610378610abe565b604051808215151515815260200191505060405180910390f35b61039a610b16565b604051808215151515815260200191505060405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461049d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4d6573736167652066726f6d204d616e7566616374757265720000000000000081525060200191505060405180910390fd5b83600160028111156104ab57fe5b6000826040518082805190602001908083835b602083106104e157805182526020820191506020810190506020830392506104be565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060040160009054906101000a900460ff16600281111561053057fe5b1415610587576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610c3d6028913960400191505060405180910390fd5b8460028081111561059457fe5b6000826040518082805190602001908083835b602083106105ca57805182526020820191506020810190506020830392506105a7565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060040160009054906101000a900460ff16600281111561061957fe5b1415610670576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180610c146029913960400191505060405180910390fd5b856000876040518082805190602001908083835b602083106106a75780518252602082019150602081019050602083039250610684565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000190805190602001906106f0929190610b6e565b50846000876040518082805190602001908083835b602083106107285780518252602082019150602081019050602083039250610705565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001019080519060200190610771929190610b6e565b50836000876040518082805190602001908083835b602083106107a95780518252602082019150602081019050602083039250610786565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020190805190602001906107f2929190610b6e565b50826000876040518082805190602001908083835b6020831061082a5780518252602082019150602081019050602083039250610807565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206003019080519060200190610873929190610b6e565b507f1bd18550aada401ad63c66b8199ab0b5261d5ba7998e838317fe1388ec96c1828686868660405180806020018060200180602001806020018060200186810386528a818151815260200191508051906020019080838360005b838110156108e95780820151818401526020810190506108ce565b50505050905090810190601f1680156109165780820380516001836020036101000a031916815260200191505b50868103855289818151815260200191508051906020019080838360005b8381101561094f578082015181840152602081019050610934565b50505050905090810190601f16801561097c5780820380516001836020036101000a031916815260200191505b50868103845288818151815260200191508051906020019080838360005b838110156109b557808201518184015260208101905061099a565b50505050905090810190601f1680156109e25780820380516001836020036101000a031916815260200191505b50868103835287818151815260200191508051906020019080838360005b83811015610a1b578082015181840152602081019050610a00565b50505050905090810190601f168015610a485780820380516001836020036101000a031916815260200191505b508681038252600f8152602001807f4465706f7420496e2d6368617267650000000000000000000000000000000000815250602001995050505050505050505060405180910390a1505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610baf57805160ff1916838001178555610bdd565b82800160010185558215610bdd579182015b82811115610bdc578251825591602001919060010190610bc1565b5b509050610bea9190610bee565b5090565b610c1091905b80821115610c0c576000816000905550600101610bf4565b5090565b9056fe536f6d657468696e672069732057726f6e672066726f6d204465706f74496e636861726765203a2820536f6d657468696e672069732057726f6e672066726f6d204d616e756661637475726572203a2820a265627a7a723158205c685273df347ad7aa6600e33599bbcfb6cd2219aaa32de16707225fbadc638164736f6c63430005110032";

//  console.log("Success");
function deployContract(){

	web3.eth.getAccounts().then(async function (accounts){
		// if(err =>{
		// 	console.log(err)
		// })
		var drugContract = new web3.eth.Contract(abi);
		//console.log(drugContract)

		var deployData = await drugContract.deploy({
			data: bytecode
		}).encodeABI();

		const tx={
			chainId: 23112,
			data: deployData,
			gas:600000*1.50
		}
		var BaseAccount = keyth.recover('new1',keyth.importFromFile(accounts[0], './block/data/')).toString('hex')

		web3.eth.accounts.signTransaction(tx, "0x"+ BaseAccount).then(signed =>{
			web3.eth.sendSignedTransaction(signed.rawTransaction).on('receipt', async function(response){
				console.log(response)

				
				// const newContract = new ContractGet({
				// 	blockHash: response.blockHash,
				// 	blockNumber: response.blockNumber,
				// 	contractAddress: response.contractAddress,
				// 	cumulativeGasUsed: response.cumulativeGasUsed,
				// 	from: response.from,
				// 	gasUsed: response.gasUsed,
				// 	logsBloom: response.logsBloom,
				// 	status: response.status,
				// 	to: response.to,
				// 	transactionHash: response.transactionHash,
				// 	transactionIndex: response.transactionIndex,
				// 	type: response.type
				// })

				// const conSave = await newContract.save();
				// console.log(conSave)
			 
			})
			
		})
		//console.log(deployData)
	})



 }


module.exports = deployContract